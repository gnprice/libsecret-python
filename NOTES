
TODO
====

- To get actual secret, need a Session.  Example:
    session = proxy().OpenSession('plain', Variant.new_string(''))
    secret = proxy('collection/login/870').GetSecret(session[1])
    value = ''.join(chr(i) for i in secret[2])

- Alternatively, see this doc for more context:
    https://specifications.freedesktop.org/secret-service/ch07.html
  So using pydbus *isn't* actually the same as using gi.repository.Secret;
  they both do use `gi`, but the latter is using it over libsecret (which
  underneath speaks DBus in a particular way), while the former is using
  it directly over DBus.  With libsecret, the secret would be kept in
  non-swappable memory (and then it'd be useful to encrypt it in transit
  to neutralize any swapping of intermediate buffers.)

  Though meh, I'm then going to be doing something *with* the secret,
  which I won't be able to keep confined to non-swappable memory.
  So maybe pydbus is a perfectly fine approach.

- Make a little CLI, with Click or something.  Would be handy to in
  particular add a `print(proxy(ARG).Introspect())` command.


UPSTREAM DOCS & NOTES
=====================

Important docs:
  https://github.com/LEW21/pydbus/blob/master/doc/tutorial.rst#accessing-exported-objects
  https://specifications.freedesktop.org/secret-service/

For reference on the specific API:
  https://lazka.github.io/pgi-docs/Secret-1/classes/Collection.html

... or just open a REPL and start doing things like:
  print(bus.get('.secrets').Introspect())
  print(bus.get('.secrets', 'collection/session').Introspect())
  print(bus.get('.secrets', 'collection/login/870').Introspect())
  b = bus.get('.secrets', 'collection/login')
  dir(b)

Helpful background for understanding the API:

  Aliases:
    https://lists.freedesktop.org/archives/authentication/2010-September/000166.html
  Alias paths, a bit in the spec that got taken out of the implementation, AFAICT:
    https://lists.freedesktop.org/archives/authentication/2009-December/000141.html
  Session encryption:
    https://lists.freedesktop.org/archives/authentication/2010-September/000172.html
  Properties named by full names:
    https://lists.freedesktop.org/archives/authentication/2011-March/000226.html
  When the spec got officially published (albeit as a draft):
    https://lists.freedesktop.org/archives/authentication/2011-April/000234.html

Reading still to do:
  https://wiki.gnome.org/Projects/GnomeKeyring/Architecture
  https://wiki.gnome.org/Projects/GnomeKeyring/Pam (about auto-unlock)
  https://wiki.gnome.org/Projects/GnomeKeyring/Goals

Oh hmm interesting:

  > A keyring can be configured to be locked automatically after a
  > period of inactivity (This isn't actually implemented yet but is
  > coming soon)

  https://gitlab.gnome.org/GNOME/gnome-keyring/blob/master/docs/keyring-intro.txt
  last edited 2011-09-15

Guess if we want to re-lock a keyring, we'll have to hack a way to
do it ourselves.  E.g., `echo 'libsecret lock ...' | at 'now + 2 min'`.

Also, some thoughts from the gnome-keyring author (and main author of
the Secret Service API) specifically about applications storing secrets
and other config:
  https://lists.freedesktop.org/archives/authentication/2013-May/000267.html
Doesn't appear to have led to any concrete implementation, though; I
believe that's one of the last things he did before moving to other projects.
